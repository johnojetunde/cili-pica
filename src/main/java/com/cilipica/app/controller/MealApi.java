/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cilipica.app.controller;

import com.cilipica.app.model.ModelApiResponse;
import com.cilipica.domain.model.Meal;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-06T21:29:52.991Z[GMT]")
@Api(value = "meal", description = "the meal API")
public interface MealApi {

    @ApiOperation(value = "Add a new meal to the restaurant", nickname = "addMeal", notes = "", authorizations = {
            @Authorization(value = "api_key")}, tags = {"meal",})
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/meal",
            consumes = {"application/json", "application/xml"},
            method = RequestMethod.POST)
    ResponseEntity<Void> addMeal(@ApiParam(value = "Meal object that needs to be added to the restaurant", required = true) @Valid @RequestBody Meal body
    );

    @ApiOperation(value = "Deletes a meal", nickname = "deleteMeal", notes = "", authorizations = {
            @Authorization(value = "api_key")}, tags = {"meal",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Meal not found")})
    @RequestMapping(value = "/meal/{mealId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMeal(@ApiParam(value = "Meal id to delete", required = true) @PathVariable("mealId") Long mealId
            , @ApiParam(value = "") @RequestHeader(value = "api_key", required = false) String apiKey
    );

    @ApiOperation(value = "Finds Meals by status", nickname = "findMealsByStatus", notes = "Multiple status values can be provided with comma separated strings", response = Meal.class, responseContainer = "List", authorizations = {
            @Authorization(value = "api_key")}, tags = {"meal",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Meal.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid status value")})
    @RequestMapping(value = "/meal/findByStatus",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Meal>> findMealsByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "available, soldout") @Valid @RequestParam(value = "status", required = true) List<String> status
    );

    @ApiOperation(value = "Find meal by ID", nickname = "getMealById", notes = "Returns a single meal", response = Meal.class, authorizations = {
            @Authorization(value = "api_key")}, tags = {"meal",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Meal.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Meal not found")})
    @RequestMapping(value = "/meal/{mealId}",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Meal> getMealById(@ApiParam(value = "ID of meal to return", required = true) @PathVariable("mealId") Long mealId
    );

    @ApiOperation(value = "Update an existing meal", nickname = "updateMeal", notes = "", authorizations = {
            @Authorization(value = "api_key")}, tags = {"meal",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Meal not found"),
            @ApiResponse(code = 405, message = "Validation exception")})
    @RequestMapping(value = "/meal",
            consumes = {"application/json", "application/xml"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateMeal(@ApiParam(value = "Meal object that needs to be added to the restaurant", required = true) @Valid @RequestBody Meal body
    );

    @ApiOperation(value = "Updates a meal in the restaurant with form data", nickname = "updateMealWithForm", notes = "", authorizations = {
            @Authorization(value = "api_key")}, tags = {"meal",})
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/meal/{mealId}",
            consumes = {"application/x-www-form-urlencoded"},
            method = RequestMethod.POST)
    ResponseEntity<Void> updateMealWithForm(@ApiParam(value = "ID of meal that needs to be updated", required = true) @PathVariable("mealId") Long mealId
            , @ApiParam(value = "") @RequestParam(value = "name", required = false) String name
            , @ApiParam(value = "") @RequestParam(value = "status", required = false) String status
    );

    @ApiOperation(value = "uploads an image", nickname = "uploadFile", notes = "", response = ModelApiResponse.class, authorizations = {
            @Authorization(value = "api_key")}, tags = {"meal",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class)})
    @RequestMapping(value = "/meal/{mealId}/uploadImage",
            produces = {"application/json"},
            consumes = {"multipart/form-data"},
            method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> uploadFile(@ApiParam(value = "ID of meal to update", required = true) @PathVariable("mealId") Long mealId
            , @ApiParam(value = "") @RequestParam(value = "additionalMetadata", required = false) String additionalMetadata
            , @ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file
    );

}
