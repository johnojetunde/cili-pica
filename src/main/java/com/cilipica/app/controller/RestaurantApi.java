/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cilipica.app.controller;

import com.cilipica.domain.model.Meal;
import com.cilipica.domain.model.Order;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-06T21:29:52.991Z[GMT]")
@Api(value = "restaurant", description = "the restaurant API")
public interface RestaurantApi {

    @ApiOperation(value = "Delete purchase order by ID", nickname = "deleteOrder", notes = "", tags = {"restaurant",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Order not found")})
    @RequestMapping(value = "/restaurant/order/{orderId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@Min(1L) @ApiParam(value = "ID of the order that needs to be deleted", required = true, allowableValues = "") @PathVariable("orderId") Long orderId
    );

    @ApiOperation(value = "Returns only available meals", nickname = "getMenu", notes = "Returns an array of meals", response = Meal.class, responseContainer = "List", authorizations = {
            @Authorization(value = "api_key")}, tags = {"restaurant",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Meal.class, responseContainer = "List")})
    @RequestMapping(value = "/restaurant/menu",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Meal>> getMenu();

    @ApiOperation(value = "Find purchase order by ID", nickname = "getOrderById", notes = "", response = Order.class, tags = {"restaurant",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Order.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Order not found")})
    @RequestMapping(value = "/restaurant/order/{orderId}",
            produces = {"application/xml", "application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Order> getOrderById(@Min(1L) @Max(10L) @ApiParam(value = "ID of meal that needs to be fetched", required = true, allowableValues = "") @PathVariable("orderId") Long orderId
    );

    @ApiOperation(value = "Place an order for a meal", nickname = "placeOrder", notes = "", response = Order.class, tags = {"restaurant",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Order.class),
            @ApiResponse(code = 400, message = "Invalid Order")})
    @RequestMapping(value = "/restaurant/order",
            produces = {"application/xml", "application/json"},
            consumes = {"*/*"},
            method = RequestMethod.POST)
    ResponseEntity<Order> placeOrder(@ApiParam(value = "order placed for purchasing the meal", required = true) @Valid @RequestBody Order body
    );

}
